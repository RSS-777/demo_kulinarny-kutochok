import cron from "node-cron";
import { cleanExpiredPendingUsers, cleanExpiredBannedEmails } from "./cleanupService.js";
import sendWeeklyRecipeNewsletter from "./emailSubscriberService.js";
import logger from "../logger/logger.js";
import { generateSitemap } from '../utils/sitemapGenerator.js';

cron.schedule("*/5 * * * *", async () => {
  try {
    await cleanExpiredPendingUsers();
  } catch (error: unknown) {
    if (error instanceof Error) {
      logger.error(`[Cron] Error while clearing expired users: ${error.message}`);
    } else {
      logger.error("[Cron] Unknown error while clearing expired users");
    }
  }
});

cron.schedule("0 9 * * 1", async () => {
  try {
    await sendWeeklyRecipeNewsletter();
  } catch (error: unknown) {
    if (error instanceof Error) {
      logger.error(`[Cron] Error while sending weekly newsletter: ${error.message}`);
    } else {
      logger.error("[Cron] Unknown error while sending weekly newsletter");
    }
  }
});

cron.schedule("0 0 * * *", async () => {
  try {
    await generateSitemap();
    logger.info("[Cron] Sitemap successfully generated by cron job");
  } catch (error: unknown) {
    if (error instanceof Error) {
      logger.error(`[Cron] Error while generating sitemap: ${error.message}`);
    } else {
      logger.error("[Cron] Unknown error while generating sitemap");
    }
  }
});

cron.schedule("0 1 * * *", async () => {
  try {
    await cleanExpiredBannedEmails();
  } catch (error: unknown) {
    if (error instanceof Error) {
      logger.error(`[Cron] Error while cleaning expired banned emails: ${error.message}`);
    } else {
      logger.error("[Cron] Unknown error while cleaning expired banned emails");
    }
  }
});